<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java线程池浅析]]></title>
    <url>%2F2018%2F06%2F23%2FExecutors%2F</url>
    <content type="text"><![CDATA[Java线程池Executors简单源码分析 Executors：创建线程池类型 newCachedThreadPool() 返回不限定最大线程数量的线程池，若无任务则不创建线程，来任务时创建线程执行，并且每个空闲线程会在60秒后被回收newFixedThreadPool() 返回固定线程数量的线程池，核心线程数和最大线程数是一样的newScheduledThreadPool() 可指定核心线程数量 提前说明下，这几种线程池底层都是调用的ThreadPoolExecutor类对象，ThreadPoolExecutor类构造方法参数为：第一个参数是核心线程数：corePoolSize第一个参数是最大线程数：maximumPoolSize第一个参数是线程存活时间：keepAliveTime第四个参数是TimeUnit对象：TimeUnit第五个参数是任务等待队列：BlockingQueue第六个参数是拒绝策略：(默认是)AbortPolicy 下面看下每种线程池： Executors.newCachedThreadPool():12345public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;()); &#125; CachedThreadPool线程池是不限定最大线程数量的线程池，若无任务到来则不创建线程，来任务时创建线程执行，并且每个空闲线程会在60秒后被回收。其采用的任务等待队列是SynchronousQueue，是无缓冲队列，队列中不放任务，来任务后新建线程并直接交给线程处理，若无线程可创建，则执行拒绝策略。 Executors.newFixedThreadPool(10):12345public static ExecutorService newFixedThreadPool(int nThreads) &#123; return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()); &#125; FixedThreadPool线程池返回固定线程数量的线程池，核心线程数和最大线程数是一样的。其采用的任务等待队列是LinkedBlockingDeque，是无界队列，来任务后，若线程池线程数不超过核心线程数,则新建线程处理该任务，若达到了核心线程数，则一直将任务加入无界队列，直到耗尽系统资源。 Executors.newScheduledThreadPool(10):123456789101112131415public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) &#123; return new ScheduledThreadPoolExecutor(corePoolSize); &#125; //ScheduledThreadPoolExecutor类继承了ThreadPoolExecutor类public class ScheduledThreadPoolExecutor extends ThreadPoolExecutor implements ScheduledExecutorServicepublic ScheduledThreadPoolExecutor(int corePoolSize) &#123; super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new DelayedWorkQueue()); &#125; 可以看到ScheduledThreadPool线程池底层也是调用ThreadPoolExecutor类，创建时指定核心线程数量即可。其采用的任务等待队列是DelayedWorkQueue，是延迟队列，可以设定任务延迟多久再执行。还有种任务等待队列是有界队列：ArrayBlockingQueue，使用该队列时，来任务后，若线程池线程数不超过核心线程数，则新建线程处理该任务，若达到了核心线程数，则将任务加入有界队列。当有界队列满时，判断线程池线程数是否达到最大线程数，没达到则创建新线程处理，达到则执行拒绝策略。 线程池拒绝策略 java的线程池拒绝策略有： AbortPolicy: 默认的拒绝策略，抛出异常，但系统正常工作CallerRunsPolicy：只要线程池未关闭，则运行当前被丢弃的任务DiscardOldestPolicy: 丢弃等待队列最早的请求，尝试再次提交当前任务DiscardPolicy: 丢弃无法处理的任务，不做任何处理 此外，可以自定义拒绝策略(默认的几种拒绝策略不是很好)，只需要实现RejectedExecutionHandler接口，重写rejectedExecution方法即可。处理逻辑可以把无法处理的任务记录日志，之后空闲时去处理。或者给任务发送端回应，让其等短一段时间再发任务。 如有错误，务必指出，十分感谢。 作者 ：程序猿QQ2018年 06月 23日 日常歌曲推荐 A Story of Fate - Jannik]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ThreadPool</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XMPP协议SASL认证流程]]></title>
    <url>%2F2018%2F06%2F20%2FXMPPSASL%2F</url>
    <content type="text"><![CDATA[XMPP协议SASL认证流程—以openfire服务器为例 XMPP协议的完整登录流程为： TLS协商，构建加密通道 SASL协商，进行登录验证 SASL协商后即登录成功，之后进行资源绑定（用户可能通过手机或电脑等登陆） 这里主要讨论SASL协商，假设现在已建立好TLS加密通道。 step1 客户端向服务器发送一个新的xml流。1&lt;stream:stream xmlns='jabber:client' to='localhost' xmlns:stream='http://etherx.jabber.org/streams' version='1.0' from='zhangsan@localhost' xml:lang='en'&gt; step2 服务器向服务器发送响应流, 声明服务器支持的SASL验证机制。123456789101112&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;stream:stream xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client" from="localhost" id="45ulb20rwb" xml:lang="en" version="1.0"&gt;&lt;stream:features&gt; &lt;mechanisms xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt; &lt;mechanism&gt;PLAIN&lt;/mechanism&gt; &lt;mechanism&gt;SCRAM-SHA-1&lt;/mechanism&gt; &lt;mechanism&gt;CRAM-MD5&lt;/mechanism&gt; &lt;mechanism&gt;DIGEST-MD5&lt;/mechanism&gt; &lt;/mechanisms&gt; &lt;compression xmlns="http://jabber.org/features/compress"&gt;&lt;method&gt;zlib&lt;/method&gt;&lt;/compression&gt; &lt;ver xmlns="urn:xmpp:features:rosterver"/&gt; &lt;register xmlns="http://jabber.org/features/iq-register"/&gt;&lt;/stream:features&gt; step3 客户端向服务器发送auth流，声明客户端选择的SASL验证机制，openfire服务器默认是SCRAM-SHA-1auth流内容：n=用户名r=客户端随机数123&lt;auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='SCRAM-SHA-1'&gt;biwsbj16aGFuZ3NhbixyPSNhTTRWeHdjO2ZzckZ2M3tuXnxHMVlTWWwzQEdCI1Va&lt;/auth&gt;经过base64解码后：n,,n=zhangsan,r=#aM4Vxwc;fsrFv3&#123;n^|G1YSYl3@GB#UZ —————前方高能————————发现网上不少博客说的都是PLAIN机制的验证流程，此处从源码层面剖析下SCRAM-SHA-1机制。因为PLAIN机制，客户端会把用户名和密码发给服务器，不经过加密，只是base64编码了一下。服务器会从数据库(例如mysql数据库)的ofUser表中取出密码，解密后与客户端传来的密码比对即可。不够安全。感兴趣可以看下SaslServerPlainImpl类的evaluateResponse方法。 下面介绍SCRAM-SHA-1的流程。服务器接收到auth流后，StanzaHandler类的process方法会被调用。process方法关键代码如下： 123456else if ("auth".equals(tag)) &#123; startedSASL = true; saslStatus = SASLAuthentication.handle(session, doc);&#125; else if (startedSASL &amp;&amp; "response".equals(tag) || "abort".equals(tag)) &#123; saslStatus = SASLAuthentication.handle(session, doc);&#125; 判断xml流的类型是auth后，会调用SASLAuthentication.handle()方法，其实之后客户端发来的response流或abort流也是调用该方法。handle方法中会判断该xml流是auth还是response。1234567891011121314switch ( ElementType.valueOfCaseInsensitive( doc.getName() ) ) &#123; case ABORT: throw new SaslFailureException( Failure.ABORTED ); case AUTH: ... SaslServer saslServer = Sasl.createSaslServer( mechanismName, "xmpp", serverName, props, new XMPPCallbackHandler() ); ... session.setSessionData( "SaslServer", saslServer ); ... case RESPONSE: // Either a challenge or success data. final byte[] challenge = saslServer.evaluateResponse( decoded ); 判断是auth后，主要就是创建了Saslserver服务器，会根据之前所选的SASL验证机制创建对应的服务器。此处创建的是ScramSha1SaslServer服务器，在SaslServerFactoryImpl类的createSaslServer方法中创建，代码如下：12345678910111213case "PLAIN": return new SaslServerPlainImpl( protocol, serverName, props, cbh );case "SCRAM-SHA-1": return new ScramSha1SaslServer();case "ANONYMOUS": return new AnonymousSaslServer( session );case "EXTERNAL": if ( session instanceof LocalClientSession ) return new ExternalClientSaslServer( (LocalClientSession) session ); if ( session instanceof LocalIncomingServerSession ) return new ExternalServerSaslServer( (LocalIncomingServerSession) session );case JiveSharedSecretSaslServer.NAME: return new JiveSharedSecretSaslServer(); ScramSha1SaslServer类会在收到auth流后向客户端发送challenge流，之后客户端会发出应答流response，经过SASLAuthentication.handle()方法处理后也是交给ScramSha1SaslServer类进行验证。 —————前方极度高能————————12345678910111213141516171819202122private State state = State.INITIAL; //state初始化时的状态...switch (state) &#123; case INITIAL: challenge = generateServerFirstMessage(response); state = State.IN_PROGRESS; //服务器发送challenge后状态变为IN_PROGRESS break; case IN_PROGRESS: challenge = generateServerFinalMessage(response); state = State.COMPLETE; //服务器验证完response后状态变为COMPLETE break; case COMPLETE: if (response == null || response.length == 0) &#123; challenge = new byte[0]; break; &#125; default: throw new SaslException("No response expected in state " + state); &#125; step4 generateServerFirstMessage方法负责对auth流进行处理并发出challenge流。12345678910111213private byte[] generateServerFirstMessage(final byte[] response) throws SaslException &#123; String clientFirstMessage = new String(response, StandardCharsets.UTF_8); Matcher m = CLIENT_FIRST_MESSAGE.matcher(clientFirstMessage); if (!m.matches()) &#123; throw new SaslException("Invalid first client message"); &#125; clientFirstMessageBare = m.group(5); username = m.group(6); //从auth流中得到用户名 String clientNonce = m.group(7); //从auth流中得到客户端随机数 nonce = clientNonce + UUID.randomUUID().toString(); //对客户端随机数再次随机，之后会对其验证 serverFirstMessage = String.format("r=%s,s=%s,i=%d", nonce, DatatypeConverter.printBase64Binary(getSalt(username)),getIterations(username)); //准备发给客户端的challenge流 return serverFirstMessage.getBytes(StandardCharsets.UTF_8);&#125; challenge流内容：r=服务端随机数(客户端随机数+UUID)s=salt(base64编码的盐，存储在openfiref服务端数据库的ofUser表中)i =迭代次数(存储在openfiref服务端数据库的ofUser表中) 123&lt;challenge xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt;cj0jYU00Vnh3Yztmc3JGdjN7bl58RzFZU1lsM0BHQiNVWjA3MzAzYzgwLWM2YTctNGRjMC1iZmUyLWVjODNlYmJmY2FlMCxzPVdmckVRTXVmZVdCSmoxS0dUR0p5aVJuaGIrWVJFQzZKLGk9NDA5Ng==&lt;/challenge&gt;解码后内容为：r=#aM4Vxwc;fsrFv3&#123;n^|G1YSYl3@GB#UZ07303c80-c6a7-4dc0-bfe2-ec83ebbfcae0,s=WfrEQMufeWBJj1KGTGJyiRnhb+YREC6J,i=4096 step5 客户端会根据用户输入密码、从服务器challenge流中获得的盐和迭代次数，计算出一些数值，并作为response流发给服务器去验证。123456789101112clientFinalMessageBare = "c=biws,r=服务端随机数"saltedPassword = PBKDF2-SHA-1(normalizedPassword, salt, i)clientKey = HMAC-SHA-1(saltedPassword, "客户端密钥")storedKey = SHA-1(clientKey)authMessage = auth流内容+","+challenge流内容+","clientFinalMessageBareclientSignature = HMAC-SHA-1(storedKey, authMessage)clientProof = clientKey 异或 clientSignatureserverKey = HMAC-SHA-1(saltedPassword, "服务端密钥")serverSignature = HMAC-SHA-1(serverKey, authMessage)clientFinalMessage = clientFinalMessageBare",p="base64(clientProof)"客户端对clientFinalMessage进行base64编码并将其作为response流发送给服务器 response流内容：c=biwsr=服务端随机数p=base64(clientProof)123&lt;response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'&gt;Yz1iaXdzLHI9I2FNNFZ4d2M7ZnNyRnYze25efEcxWVNZbDNAR0IjVVowNzMwM2M4MC1jNmE3LTRkYzAtYmZlMi1lYzgzZWJiZmNhZTAscD1QdUE5OGVSVXBBSGhqa2EwdDJ3dVQ1TFBvU1k9&lt;/response&gt;解码后内容为：c=biws,r=#aM4Vxwc;fsrFv3&#123;n^|G1YSYl3@GB#UZ07303c80-c6a7-4dc0-bfe2-ec83ebbfcae0,p=PuA98eRUpAHhjka0t2wuT5LPoSY= step6 ScramSha1SaslServer类的generateServerFinalMessage方法负责对response流进行验证，验证通过会向客户端发送success流。generateServerFinalMessage方法核心代码：1234567891011121314151617181920212223242526272829303132333435363738String clientFinalMessage = new String(response, StandardCharsets.UTF_8);Matcher m = CLIENT_FINAL_MESSAGE.matcher(clientFinalMessage);String clientFinalMessageWithoutProof = m.group(1);String clientNonce = m.group(3); //客户端发来的服务器随机数String proof = m.group(4); //base64(clientProof) if (!nonce.equals(clientNonce)) &#123; //验证服务器之前生成的随机数和客户端发来的服务器随机数是否一致 throw new SaslException("Client final message has incorrect nonce value"); &#125; try &#123; String authMessage = clientFirstMessageBare + "," + serverFirstMessage + "," + clientFinalMessageWithoutProof; byte[] storedKey = getStoredKey( username ); //根据用户名查找服务端存储的storedKey if (storedKey == null) &#123; throw new SaslException("No stored key for user '"+username+"'"); &#125; byte[] serverKey = getServerKey(username); //根据用户名查找服务端存储的serverKey if (serverKey == null) &#123; throw new SaslException("No server key for user '"+username+"'"); &#125; byte[] clientSignature = ScramUtils.computeHmac(storedKey, authMessage); byte[] serverSignature = ScramUtils.computeHmac(serverKey, authMessage); byte[] clientKey = clientSignature.clone(); byte[] decodedProof = DatatypeConverter.parseBase64Binary(proof); for (int i = 0; i &lt; clientKey.length; i++) &#123; clientKey[i] ^= decodedProof[i]; //将clientProof与clientSignature进行异或，还原出clientKey &#125; //将服务端存储的storedKey和clientKey经SHA-1算法得到值进行比对 if (!Arrays.equals(storedKey, MessageDigest.getInstance("SHA-1").digest(clientKey))) &#123; throw new SaslException("Authentication failed"); &#125; //比对成功则表明验证成功，向客户端发送success流 return ("v=" + DatatypeConverter.printBase64Binary(serverSignature)) .getBytes(StandardCharsets.UTF_8); ————————-关键点————————————-客户端：clientKey 异或 clientSignature = clientProof服务端：clientProof异或clientSignature=clientKey，便可还原出clientKey。再将服务端存储的storedKey和clientKey经SHA-1算法得到值进行比对，即可完成验证。 success流内容：v=base64(serverSignature)123&lt;success xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt;dj1WZUtxOFFTRFBTbXdaNUM2V1hvanZTTzJwdTA9&lt;/success&gt;解码后内容为：v=VeKq8QSDPSmwZ5C6WXojvSO2pu0= 至此，XMPP协议的SASL协商完成，之后客户端发送新的流，完成资源绑定等流程。Tip: 建议下载openfire源码跑一下流程。 如有错误，务必指出，十分感谢。 作者 ：程序猿QQ2018年 06月 20日 日常歌曲推荐 secret base ~君がくれたもの~ (10 years after Ver.)]]></content>
      <categories>
        <category>XMPP</category>
      </categories>
      <tags>
        <tag>XMPP</tag>
        <tag>SASL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XMPP协议网络抓包分析-以openfire服务器为例]]></title>
    <url>%2F2018%2F06%2F16%2FXMPPTLS%2F</url>
    <content type="text"><![CDATA[XMPP协议网络抓包分析（包内容来自openfire服务器和spark客户端实际通信） XMPP登录流程Step 1 客户端发送给服务器1&lt;stream:stream xmlns='jabber:client' to='localhost' xmlns:stream='http://etherx.jabber.org/streams' version='1.0' from='zhangsan@localhost' xml:lang='en'&gt; Step2 服务器发送给客户端1&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;stream:stream xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client" from="localhost" id="agis7375o9" xml:lang="en" version="1.0"&gt; Step3 服务器发送feature流1&lt;stream:features&gt;&lt;starttls xmlns="urn:ietf:params:xml:ns:xmpp-tls"&gt;&lt;/starttls&gt;&lt;mechanisms xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt;&lt;mechanism&gt;PLAIN&lt;/mechanism&gt;&lt;mechanism&gt;SCRAM-SHA-1&lt;/mechanism&gt;&lt;mechanism&gt;CRAM-MD5&lt;/mechanism&gt;&lt;mechanism&gt;DIGEST-MD5&lt;/mechanism&gt;&lt;/mechanisms&gt;&lt;compression xmlns="http://jabber.org/features/compress"&gt;&lt;method&gt;zlib&lt;/method&gt;&lt;/compression&gt;&lt;ver xmlns="urn:xmpp:features:rosterver"/&gt;&lt;register xmlns="http://jabber.org/features/iq-register"/&gt;&lt;/stream:features&gt; Step4 客户端发送starttls1&lt;starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'&gt;&lt;/starttls&gt; Step5 服务器发送proceed1&lt;proceed xmlns="urn:ietf:params:xml:ns:xmpp-tls"/&gt; 下面开始TLS握手阶段，”握手阶段”涉及四次通信：Step1 客户端发出请求（Client Hello）客户端向服务器发出加密通信的请求，包含以下信息： 支持的协议版本，比如TLS 1.2版一个客户端生成的随机数，稍后用于生成”对话密钥”支持的加密方法列表，比如RSA公钥加密支持的压缩方法 Client Hello包内容：Secure Sockets Layer TLSv1.2 Record Layer: Handshake Protocol: Client Hello Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 161 Handshake Protocol: Client Hello Handshake Type: Client Hello (1) Length: 157 Version: TLS 1.2 (0x0303) Random: 5b4ea072ce385719769f4d6fa723b90d50532340b905dc66… Session ID Length: 0 Cipher Suites Length: 58 Cipher Suites (29 suites) Compression Methods Length: 1 Compression Methods (1 method) Extensions Length: 58 Extension: supported_groups (len=22) Extension: ec_point_formats (len=2) Extension: signature_algorithms (len=22) Client Hello包展开内容：Secure Sockets Layer TLSv1.2 Record Layer: Handshake Protocol: Client Hello Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 161 Handshake Protocol: Client Hello Handshake Type: Client Hello (1) Length: 157 Version: TLS 1.2 (0x0303) Random: 5b4ea072ce385719769f4d6fa723b90d50532340b905dc66… Session ID Length: 0 Cipher Suites Length: 58 Cipher Suites (29 suites) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 (0xc023) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xc027) Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA256 (0x003c) Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 (0xc025) Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 (0xc029) Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 (0x0067) Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 (0x0040) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (0xc009) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (0xc013) Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f) Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA (0xc004) Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA (0xc00e) Cipher Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA (0x0033) Cipher Suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA (0x0032) Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b) Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f) Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 (0x009c) Cipher Suite: TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02d) Cipher Suite: TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 (0xc031) Cipher Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x009e) Cipher Suite: TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 (0x00a2) Cipher Suite: TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc008) Cipher Suite: TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA (0xc012) Cipher Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA (0x000a) Cipher Suite: TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA (0xc003) Cipher Suite: TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA (0xc00d) Cipher Suite: TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA (0x0016) Cipher Suite: TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA (0x0013) Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff) Compression Methods Length: 1 Compression Methods (1 method) Extensions Length: 58 Extension: supported_groups (len=22) Extension: ec_point_formats (len=2) Extension: signature_algorithms (len=22) Type: signature_algorithms (13) Length: 22 Signature Hash Algorithms Length: 20 Signature Hash Algorithms (10 algorithms) Signature Algorithm: ecdsa_secp521r1_sha512 (0x0603) Signature Algorithm: rsa_pkcs1_sha512 (0x0601) Signature Algorithm: ecdsa_secp384r1_sha384 (0x0503) Signature Algorithm: rsa_pkcs1_sha384 (0x0501) Signature Algorithm: ecdsa_secp256r1_sha256 (0x0403) Signature Algorithm: rsa_pkcs1_sha256 (0x0401) Signature Algorithm: SHA256 DSA (0x0402) Signature Algorithm: ecdsa_sha1 (0x0203) Signature Algorithm: rsa_pkcs1_sha1 (0x0201) Signature Algorithm: SHA1 DSA (0x0202) Step2 服务器回应（SeverHello）服务器的回应包含以下内容： 确认使用的加密通信协议版本，比如TLS 1.2版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。一个服务器生成的随机数，稍后用于生成”对话密钥”。确认使用的加密方法，比如RSA公钥加密。服务器证书。此外，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书” 该步骤在openfire服务器实际通信中包含以下内容：Server Hello、Certificate、Server Key Exchange、Server Hello Done 服务器回应包内容：Secure Sockets Layer TLSv1.2 Record Layer: Handshake Protocol: Multiple Handshake Messages Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 1216 Handshake Protocol: Server Hello Handshake Protocol: Certificate Handshake Protocol: Server Key Exchange Handshake Protocol: Server Hello Done 服务器回应包展开：Secure Sockets Layer TLSv1.2 Record Layer: Handshake Protocol: Multiple Handshake Messages Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 1216 Handshake Protocol: Server Hello Handshake Type: Server Hello (2) Length: 77 Version: TLS 1.2 (0x0303) Random: 5b4ea071bf98025de4c44612645a2c898bb1568ef83eb5e7… Session ID Length: 32 Session ID: 5b4ea071ebf855fda26b52e16bba271e56fe51973d539733… Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (0xc027) Compression Method: null (0) Extensions Length: 5 Extension: renegotiation_info (len=1) Handshake Protocol: Certificate Handshake Type: Certificate (11) Length: 794 Certificates Length: 791 Certificates (791 bytes) Handshake Protocol: Server Key Exchange Handshake Type: Server Key Exchange (12) Length: 329 EC Diffie-Hellman Server Params Curve Type: named_curve (0x03) Named Curve: secp256r1 (0x0017) Pubkey Length: 65 Pubkey: 04a1e495e7a74597de381dea4ade852d4fe68a75726dda92… Signature Algorithm: rsa_pkcs1_sha512 (0x0601) Signature Hash Algorithm Hash: SHA512 (6) Signature Hash Algorithm Signature: RSA (1) Signature Length: 256 Signature: 2d951780af8d09f4e50d51129d93af3796cd768df68c7982… Handshake Protocol: Server Hello Done Handshake Type: Server Hello Done (14) Length: 0 Step3 客户端回应客户端收到服务器回应以后，首先验证服务器证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息： 一个随机数。该随机数用服务器公钥加密，防止被窃听。编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。客户端握手结束通知，表示客户端的握手 阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。 上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。 至于为什么一定要用三个随机数，来生成”会话密钥”：“不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。Pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。”此外，如果前一步，服务器要求客户端证书，客户端会在这一步发送证书及相关信息。 但是在抓取openfire的包中没有看到第三步客户端生成的随机数，不知道原因？客户端回应包内容Client Key Exchange:Secure Sockets Layer TLSv1.2 Record Layer: Handshake Protocol: Client Key Exchange Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 70 Handshake Protocol: Client Key Exchange Handshake Type: Client Key Exchange (16) Length: 66 EC Diffie-Hellman Client Params Pubkey Length: 65 Pubkey: 0474e65406da33b2d67b72d4df5494432c5a23ffae141960… 客户端回应包内容：编码改变通知、握手结束通知Secure Sockets Layer TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec Content Type: Change Cipher Spec (20) Version: TLS 1.2 (0x0303) Length: 1 Change Cipher Spec Message TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 80 Handshake Protocol: Encrypted Handshake Message Step4 服务器最终回应服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的”会话密钥”。然后，向客户端最后发送下面信息。 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。 至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。 服务器回应报内容：Secure Sockets Layer TLSv1.2 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec Content Type: Change Cipher Spec (20) Version: TLS 1.2 (0x0303) Length: 1 Change Cipher Spec Message Secure Sockets Layer TLSv1.2 Record Layer: Handshake Protocol: Encrypted Handshake Message Content Type: Handshake (22) Version: TLS 1.2 (0x0303) Length: 80 Handshake Protocol: Encrypted Handshake Message 接下来进入SASL协商流程Step1：客户端发送给服务器1&lt;stream:stream xmlns='jabber:client' to='localhost' xmlns:stream='http://etherx.jabber.org/streams' version='1.0' from='zhangsan@localhost' xml:lang='en'&gt; Step2：服务器发送给客户端，并带上任何可用的流特性1&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;stream:stream xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client" from="localhost" id="45ulb20rwb" xml:lang="en" version="1.0"&gt;&lt;stream:features&gt;&lt;mechanisms xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt;&lt;mechanism&gt;PLAIN&lt;/mechanism&gt;&lt;mechanism&gt;SCRAM-SHA-1&lt;/mechanism&gt;&lt;mechanism&gt;CRAM-MD5&lt;/mechanism&gt;&lt;mechanism&gt;DIGEST-MD5&lt;/mechanism&gt;&lt;/mechanisms&gt;&lt;compression xmlns="http://jabber.org/features/compress"&gt;&lt;method&gt;zlib&lt;/method&gt;&lt;/compression&gt;&lt;ver xmlns="urn:xmpp:features:rosterver"/&gt;&lt;register xmlns="http://jabber.org/features/iq-register"/&gt;&lt;/stream:features&gt; Step3：客户端发送给服务器，客户端选择一个验证机制1&lt;auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='SCRAM-SHA-1'&gt;biwsbj16aGFuZ3NhbixyPSNhTTRWeHdjO2ZzckZ2M3tuXnxHMVlTWWwzQEdCI1Va&lt;/auth&gt; Step4：服务器发送给客户端，服务器发送挑战1&lt;challenge xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt;cj0jYU00Vnh3Yztmc3JGdjN7bl58RzFZU1lsM0BHQiNVWjA3MzAzYzgwLWM2YTctNGRjMC1iZmUyLWVjODNlYmJmY2FlMCxzPVdmckVRTXVmZVdCSmoxS0dUR0p5aVJuaGIrWVJFQzZKLGk9NDA5Ng==&lt;/challenge&gt; Step5：客户端发送给服务器，发送一个应答1&lt;response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'&gt;Yz1iaXdzLHI9I2FNNFZ4d2M7ZnNyRnYze25efEcxWVNZbDNAR0IjVVowNzMwM2M4MC1jNmE3LTRkYzAtYmZlMi1lYzgzZWJiZmNhZTAscD1QdUE5OGVSVXBBSGhqa2EwdDJ3dVQ1TFBvU1k9&lt;/response&gt; Step6：服务器发送给客户端，通知客户端成功了1&lt;success xmlns="urn:ietf:params:xml:ns:xmpp-sasl"&gt;dj1WZUtxOFFTRFBTbXdaNUM2V1hvanZTTzJwdTA9&lt;/success&gt; Step7：客户端发送给服务器，初始化一个新的流到服务器1&lt;stream:stream xmlns='jabber:client' to='localhost' xmlns:stream='http://etherx.jabber.org/streams' version='1.0' from='zhangsan@localhost' id='45ulb20rwb' xml:lang='en'&gt; Step8：服务器发送一个流到客户端，并带上支持的特性，特性中没有SASL的部分了，因为SASL握手成功1&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;stream:stream xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client" from="localhost" id="45ulb20rwb" xml:lang="en" version="1.0"&gt;&lt;stream:features&gt;&lt;compression xmlns="http://jabber.org/features/compress"&gt;&lt;method&gt;zlib&lt;/method&gt;&lt;/compression&gt;&lt;ver xmlns="urn:xmpp:features:rosterver"/&gt;&lt;bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"/&gt;&lt;session xmlns="urn:ietf:params:xml:ns:xmpp-session"&gt;&lt;optional/&gt;&lt;/session&gt;&lt;sm xmlns='urn:xmpp:sm:2'/&gt;&lt;sm xmlns='urn:xmpp:sm:3'/&gt;&lt;/stream:features&gt; 接下来进入资源绑定、加载好友列表等流程Step1: 客户端发送给服务器，请求资源绑定1&lt;iq id='tM183-3' type='set'&gt;&lt;bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'&gt;&lt;resource&gt;Spark&lt;/resource&gt;&lt;/bind&gt;&lt;/iq&gt; Step2: 服务器接受提交的资源部分并通知客户端资源绑定成功1&lt;iq type="result" id="tM183-3" to="localhost/45ulb20rwb"&gt;&lt;bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"&gt;&lt;jid&gt;zhangsan@localhost/Spark&lt;/jid&gt;&lt;/bind&gt;&lt;/iq&gt; Step3: 客户端会向服务器加载好友列表1&lt;iq id='fKWr5-5' type='get'&gt;&lt;query xmlns='jabber:iq:roster'&gt;&lt;/query&gt;&lt;/iq&gt; Step4: 服务器会查询ofRoster和ofRosterGroups表，找出用户的好友及其所在分组，然后响应客户端1&lt;iq type="result" id="fKWr5-5" to="zhangsan@localhost/Spark"&gt;&lt;query xmlns="jabber:iq:roster" ver="1379436822"&gt;&lt;item jid="wangwu@localhost" name="wangwu" subscription="both"&gt;&lt;group&gt;Friends&lt;/group&gt;&lt;/item&gt;&lt;item jid="lisi@localhost" name="lisi" subscription="both"&gt;&lt;group&gt;Friends&lt;/group&gt;&lt;/item&gt;&lt;/query&gt;&lt;/iq&gt; 补充说明1: 之后便可以进行消息发送，例如用户A发给用户B ，为维持TCP连接，客户端会每隔3分钟（例如spark客户端，已实际测试）向服务器发送心跳包，包内容如下：1&lt;iq to='localhost' id='945-249' type='result'&gt;&lt;/iq&gt; 服务器会响应客户端，成功情况：1&lt;iq type="get" id="945-249" from="localhost" to="zhangsan@localhost/Spark"&gt;&lt;ping xmlns="urn:xmpp:ping"/&gt;&lt;/iq&gt; 失败情况，之后客户端会重新连接，重连时间随重连次数不断增加：1&lt;stream:error&gt;&lt;system-shutdown xmlns='urn:ietf:params:xml:ns:xmpp-streams'/&gt;&lt;/stream:error&gt; 补充说明2: 用户在线状态改变时会向该用户的好友发送presence包，告知好友们我的状态。123456789101112&lt;presence to="zhangsan@localhost" from="lisi@localhost/Spark" id="qxrG4-10"&gt; &lt;status&gt;在线&lt;/status&gt; &lt;priority&gt;1&lt;/priority&gt; &lt;c xmlns="http://jabber.org/protocol/caps" hash="sha-1" node="http://www.igniterealtime.org/projects/smack" ver="TJuVIXqTCVfJSthaPu4MtTbaf9A="/&gt;&lt;/presence&gt;&lt;presence to="zhangsan@localhost" from="lisi@localhost/Spark" id="qxrG4-296"&gt; &lt;status&gt;离开&lt;/status&gt; &lt;priority&gt;0&lt;/priority&gt; &lt;show&gt;away&lt;/show&gt; &lt;c xmlns="http://jabber.org/protocol/caps" hash="sha-1" node="http://www.igniterealtime.org/projects/smack" ver="TJuVIXqTCVfJSthaPu4MtTbaf9A="/&gt;&lt;/presence&gt; 服务器断开后1&lt;presence to="zhangsan@localhost" from="lisi@localhost/Spark" id="qxrG4-301" type="unavailable"/&gt; 补充说明3：离线消息openfire服务器的用户离线消息是放在mysql数据库中：ofOffline表，离线用户会记录在ofOffline表中。 如有错误，务必指出，十分感谢。 作者 ：程序猿QQ2018年 06月 16日 日常歌曲推荐 secret base ~君がくれたもの~ (10 years after Ver.)]]></content>
      <categories>
        <category>XMPP</category>
      </categories>
      <tags>
        <tag>XMPP</tag>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[30万知乎用户数据爬虫分析]]></title>
    <url>%2F2018%2F05%2F26%2Fzhihu-pachong%2F</url>
    <content type="text"><![CDATA[爬取知乎30万用户信息（去重后），并从爬取数据的各维度进行分析，探索知乎用户群体的一些规律。 重点 采用MongoDB存储数据 为应对单个ip爬取被封的情况，采用代理ip池进行爬虫 为提高爬取速度，采用多线程进行爬取（采用python语言） 为提高用户质量，只爬取用户的关注列表 图表展示采用BDP，一款云端可视化数据分析工具 用户分析 本分析不具有代表性,只针对已爬取的30万数据 展示图表如下： 知乎用户性别对比可以看出知乎用户群体中男性占比最大，女性其次，还有一部分用户性别未知，难道有其他性别？ 知乎用户粉丝数量排名张公子领跑粉丝数量排行榜，粉丝数量超过150多万。丁香医生、李开复粉丝数量也超过100万大关，轮子哥排名也非常靠前。 知乎用户获得感谢数量排名张公子继续领跑感谢数量排行榜 知乎用户获赞数量排名张公子还是领跑获赞数量排行榜，快突破500万大关了。 知乎用户行业分布从知乎用户行业分布中可以看出，IT行业牢牢占据榜首，教育、金融、法律和医学等领域排名也很靠前。 知乎用户院校分布知乎用户就读院校Top10清一色985，不是清北真是不好意思往上写。 知乎用户现居地分布从知乎用户居住地可以看出，知乎用户主要活跃在北上广深等一线城市。 知乎用户个人简介词频统计从知乎用户个人简介词频统计可以看出，知乎的用户群体学生占比比较大。 知乎用户个性签名词频统计从知乎用户个性签名词频统计可以看出，用户倾向在个性签名中填写职业相关的信息。 总结 爬取的用户数量不是很大，没有很强的代表性； 可以进一步进行用户相关性分析； 日常歌曲推荐 牵丝戏 - 银临/Aki阿杰]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>知乎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IO NIO AIO的一些思考]]></title>
    <url>%2F2018%2F03%2F10%2FNIO%2F</url>
    <content type="text"><![CDATA[IO NIO AIO的一些思考 IO（同步阻塞）即BIO，其实现原理是服务端会监听某个端口，客户端通过IP和端口向服务端发起socket连接请求，通过TCP三次握手连接，如果连接成功，双方就可以通过socket进行通信。然后在一个while死循环中一直阻塞着，等待客户端的socket连接，客户端来了一个连接，服务端就创建一个线程用于和其进行数据通信。这样，来了成千上万个客户端连接，服务端就需要创建成千上万个线程，直到内存溢出服务端挂掉。其改进方式是服务端事先创建一个线程池（例如FixedThreadPool，固定线程数量），来客户端的socket连接到来时，将socket封装成任务放到线程池去执行，这样可以解决线程无限扩容的问题。但是这样做有个弊端，因为限制了线程数量，如果有大量客户端并发的请求，那么大部分的的客户端就只能在线程池的阻塞队列中等待，直到线程池中的有空闲的线程可以被使用。此外，没有解决阻塞的问题。阻塞指的是客户端（或服务端）在获取网络数据时，如果网络传输很慢，程序就一直等着，直到传输完成。很不幸，BIO是客户端（服务端）通过输入和输出流进行通信。socket.getInputStream()和socket.getOutputStream()这种方式在读写时会一直阻塞，直到有数据可读并且读取完毕或出现空指针或发生I/O异常，如果这时网络传输很慢，那就一直等下去。 NIO（同步非阻塞）NIO解决了BIO的阻塞的问题，其实现原理简单来说就是通过一个选择器（IO多路复用器）对各个客户端进行轮询，如果某客户端连接上面准备好数据了，就交给服务端的读写线程去处理。没准备好则看下一个客户端是否准备好了。这样就不会阻塞在某个客户端连接上，去等待数据准备完成。NIO的核心要素只有三个： Buffer(缓冲区)：在原来的IO方式中，是把数据直接写入或读取到stream中，在NIO中，所有数据都是用缓冲区（Buffer）去处理，缓冲区是一个数组，可以有很多类型，最常用的是ByteBuffer。此外，基本Java类型都对应了一种缓冲区，除了Boolean类型：ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer Buffer中的关键点：position:索引位置limit:限制，也可看成buffer中已有元素个数capacity:buffer的容量put():放数据，put一个元素position加一get（）:拿数据flip()：对buffer进行复位，复位时，让limit=position 然后把position变为0因为position位置容易变动，建议put或get后进行flip复位。 Channel(通道)：客户端（服务端）对数据的读取和写入都要通过通道。通道不同于BIO流的地方就是通道是双向的，可以进行同时读写操作。客户端使用SocketChannel，服务端使用ServerSocketChannel。需要读数据时通过SocketChannel.read(ByteBuffer)，把客户端数据通过通道读入缓冲区。写入数据时SocketChannel.write(ByteBuffer)，先把数据放到ByteBuffer（缓冲区），然后把缓冲区内容写入通道。 Selector(选择器):Selector会一直轮询注册在它上面的Channel（服务端和客户端都需要注册，服务端会事先注册），如果某个Channel上面发生读/写操作，该Channel就处于就绪状态，可以被Selector轮询出来，然后进行相应处理。服务端只需要一个线程维持Selector的轮询，就可以连接成千上万的客户端。其底层会根据操作系统的不同采取不同的IO复用技术，例如poll或epoll等。服务端的这个线程俗称reactor线程，这种模式也被称为reactor模式。即有专门线程去处理客户端的连接和注册，判读是否发生读写，至于真正的读写工作交给别的线程去做（一般会事先创建读写的线程池）。这样即便具体的读写业务逻辑很费时，也不会影响reactor线程。也就是说某个读写线程执行了很长时间，不会影响其他客户端请求的进入。因为主要的reactor线程还是在不断的对客户端进行轮询，有新的客户端请求发送，依旧可以轮询到，并把这些客户端的读写交给新的线程处理。 AIO（异步非阻塞）jdk1.7中新增了AIO(Asynchronous I/O)。AIO的特点是异步能力。这里可以提下两种IO多路复用方案:Reactor and Proactor。其中，Reactor模式是基于同步IO的，Proactor模式是基于异步I/O。 Reactor模式就好像NIO采用的轮询机制，通道准备好数据（处于就绪状态）就告诉选择器：我准备好了，你可以来接收数据了。即应用程序省了等待数据的过程，但数据准备好还是需要自己去处理IO操作的。Proactor模式可以理解为：操作系统，你去帮我接收一些数据，接受好了通知我一下。即应用程序不需要参与IO操作，交给操作系统去完成，完成后会通知应用程序，这就是异步。 异步有两种方式：Future模式、回调模式Future模式可以使用java.util.concurrent包下的Future，通过使用Future的get()方法可以在在异步IO操作完成时获取其结果。 回调模式使用：java.nio.channels.CompletionHandler接口。其原理是主线程会new一个CompletionHandler的实现类到子线程中执行IO操作，然后主线程可以去做别的。子进程执行完成会带着IO操作的结果返回到主线程中，正确执行时调用completed方法，失败时执行failed方法（CompletionHandler接口实现类需要重写这两个方法）。 jdk1.7新增了三个异步通道：AsynchronousFileChannel: 用于文件异步读写AsynchronousSocketChannel: 客户端异步socketAsynchronousServerSocketChannel: 服务器异步socket客户端与服务端通过AsynchronousSocketChannel和AsynchronousServerSocketChannel进行异步非阻塞的通信。AsynchronousSocketChannel通道提供了返回值为Future类型的read方法和write方法，也提供了使用CompletionHandler回调方式的read方法和write方法。 AIO中最重要的就是CompletionHandler接口，其中有两个方法completed和failed。服务端会在AsynchronousServerSocketChannel的accept方法里会传入当前server和CompletionHandler接口实现类，同时必须在completed方法里继续调用当前server的accept方法，从而去接收其他客户端的接入。1234567891011121314AsynchronousServerSocketChannel.accept(this,new ServerCompletionHandler());public class ServerCompletionHandler implements CompletionHandler&lt;AsynchronousSocketChannel,Server&gt; &#123; @Override public void completed(AsynchronousSocketChannel asc, Server attachment) &#123; //当有下一个客户端连接时，直接调用serer的accept方法，保证多个客户端都可以接入 attachment.assc.accept(attachment,this); ... &#125; @Override public void failed(Throwable exc, Server attachment) &#123; exc.printStackTrace(); &#125; 如有错误，务必指出，十分感谢。 作者 ：程序猿QQ2018年 03月 10日 日常歌曲推荐 浮生未歇 - 音频怪物]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>AIO</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
</search>
